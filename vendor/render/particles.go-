package render

import (
	"assets"
	"log"
	"render/particles"

	"github.com/go-gl/mathgl/mgl32"
	// "github.com/tbogdala/fizzle/particles"
)

var (
	Particles []*particles.System
)

func NewTrail() *particles.System {
	particleSystem := particles.NewSystem(gfx)
	emitter := particleSystem.NewEmitter(nil)
	emitter.Properties.TextureFilepath = assets.GetTexture("laser").Path
	// emitter.Properties.Origin = mgl32.Vec3{0, 4, 0}
	emitter.Properties.MaxParticles = 200
	emitter.Properties.SpawnRate = 2
	emitter.Properties.Size = 30
	emitter.Properties.Speed = 1
	emitter.Properties.Color = mgl32.Vec4{1, 0.4, 0.3, 1}
	emitter.Properties.Velocity = mgl32.Vec3{0, 0, 0}
	emitter.Properties.Acceleration = mgl32.Vec3{1, -0.5, 1}
	emitter.Properties.TTL = 10.0
	emitter.Shader = assets.GetShader("particles").Prog

	emitter.Spawner = particles.NewConeSpawner(emitter, 0.5, 1, 1)
	// emitter.Spawner.GetLocation()
	// log.Println(emitter.Owner.Origin)
	// emitter.Spawner.SetOwner(emitter)

	Particles = append(Particles, particleSystem)

	log.Println("trail")
	return particleSystem
}

func particlesUpdate(dt float64, offset mgl32.Vec3) {
	for _, p := range Particles {
		p.Update(dt, offset)
	}
}

func particlesRender(perspective, view mgl32.Mat4) {
	for _, p := range Particles {
		p.Draw(perspective, view)
		// for _, e := range p.Emitters {
		// 	e.Spawner.CreateRenderable()
		// 	e.Spawner.DrawSpawnVolume(render, colShader, perspective, view, camera)
		// }
	}
}
